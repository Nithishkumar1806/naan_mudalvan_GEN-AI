# -*- coding: utf-8 -*-
"""DM_Data_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12UijOybW8N2rPVqywarC657sFC1NEir4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import seaborn as sns

#load normalised data
df = pd.read_csv('/content/Working_data/normalised_data_6.csv')
df.drop(df.columns[[0]], axis = 1, inplace = True)
pd.set_option('display.max_columns', 30)

df

attributes_stunting = ['1. Population (female) age 6+ years who ever attended school (%)' ,
                       '3. Sex ratio of the total population (females per 1000 males)' ,
                       '7. Households with an improved drinking-water source1 (%)' ,
 '8. Households using improved sanitation facility2 (%)' ,
 '9. Households using clean fuel for cooking3 (%)' ,
 '12. Women who are literate (%)',
 '13. Men who are literate (%)' ,
 '62. Children under age 3 years breastfed within one hour of birth8 (%)',
 '65. Breastfeeding children age 6-23 months receiving an adequate diet9 10 (%)',
 '67. Total children age 6-23 months receiving an adequate diet9 10 (%)',
 '72. Women whose Body Mass Index (BMI) is below normal (BMI <18.5 kg/m2) (%)',
 '76. Children age 6-59 months who are anaemic (<11.0 g/dl) (%)',
 '79. All women age 15-49 years who are anaemic (%)',
 '14. Women with 10 or more years of schooling (%)',
 '15. Women age 20-24 years married before age 18 years (%)',
 '19. Any modern method (%)',
 '30. Mothers who had at least 4 antenatal care visits (%)',
 '32. Mothers who consumed iron folic acid for 100 days or more when they were pregnant (%)',
 '47. Children age 12-23 months fully immunized (BCG measles and 3 doses each of polio/DPT) (%)',
'68. Children under 5 years who are stunted11 (%)'
 ]

len(attributes_stunting)

"""DATA ANALYSIS TECHNIQUE: Regression Analysis"""

#importing stat models
import statsmodels.api as sm
#loading the dataset

df = df[attributes_stunting]

df

X = df.copy(deep='True')
# X: independent variable
X = X.drop(columns = ['68. Children under 5 years who are stunted11 (%)'])
Xcpy = X.copy(deep= 'True')
#y: dependent variable
y = df['68. Children under 5 years who are stunted11 (%)']

#convert to numpy
y=y.values
X=X.values

"""2.1 Full Regression Model (All variables)"""

X2 = sm.add_constant(X)
est = sm.OLS(y, X2)
est2 = est.fit()
print(est2.summary())

"""It can be observed that variables x7,x8,x9,x14,x18,x19 have p-values higher than 0.05(=threshold)"""

#drop insignificant variables
Xcpy.drop(Xcpy.columns[[6,7,8,13,17,18]], axis = 1, inplace = True)

"""Variables that still remain:"""

Xcpy.columns

len(Xcpy.columns)

X = Xcpy.copy(deep= 'True')
X=X.values

"""2.2 Second Regression Model (Selected variables)"""

X2 = sm.add_constant(X)
est = sm.OLS(y, X2)
est2 = est.fit()
print(est2.summary())

Xcpy.columns

len(Xcpy.columns)

attributes_stunting = ['1. Population (female) age 6+ years who ever attended school (%)',
       '3. Sex ratio of the total population (females per 1000 males)',
       '7. Households with an improved drinking-water source1 (%)',
       '8. Households using improved sanitation facility2 (%)',
       '9. Households using clean fuel for cooking3 (%)',
       '12. Women who are literate (%)',
       '67. Total children age 6-23 months receiving an adequate diet9 10 (%)',
       '72. Women whose Body Mass Index (BMI) is below normal (BMI <18.5 kg/m2) (%)',
       '76. Children age 6-59 months who are anaemic (<11.0 g/dl) (%)',
       '79. All women age 15-49 years who are anaemic (%)',
       '15. Women age 20-24 years married before age 18 years (%)',
       '19. Any modern method (%)',
       '30. Mothers who had at least 4 antenatal care visits (%)',
              '13. Men who are literate (%)',
'62. Children under age 3 years breastfed within one hour of birth8 (%)',
'32. Mothers who consumed iron folic acid for 100 days or more when they were pregnant (%)']

len(attributes_stunting)

"""3. Association Rule Mining to identify factors that affect child stunting"""

df_apriori = pd.read_csv('/content/Working_data/equal_frequency_discretised_data_7.csv')
df_apriori.drop(df_apriori.columns[[0]], axis = 1, inplace = True)
df_apriori = df_apriori[['1. Population (female) age 6+ years who ever attended school (%)' ,
 '8. Households using improved sanitation facility2 (%)' ,
 '9. Households using clean fuel for cooking3 (%)' ,
 '12. Women who are literate (%)',
 '13. Men who are literate (%)' ,
 '62. Children under age 3 years breastfed within one hour of birth8 (%)',
 '65. Breastfeeding children age 6-23 months receiving an adequate diet9 10 (%)',
 '67. Total children age 6-23 months receiving an adequate diet9 10 (%)',
 '72. Women whose Body Mass Index (BMI) is below normal (BMI <18.5 kg/m2) (%)',
 '76. Children age 6-59 months who are anaemic (<11.0 g/dl) (%)',
 '79. All women age 15-49 years who are anaemic (%)',
 '14. Women with 10 or more years of schooling (%)',
 '15. Women age 20-24 years married before age 18 years (%)',
 '19. Any modern method (%)',
 '30. Mothers who had at least 4 antenatal care visits (%)',
 '32. Mothers who consumed iron folic acid for 100 days or more when they were pregnant (%)',
 '47. Children age 12-23 months fully immunized (BCG measles and 3 doses each of polio/DPT) (%)',
                         '68. Children under 5 years who are stunted11 (%)'
                        ]]

df_apriori = df_apriori.drop(columns = ['1. Population (female) age 6+ years who ever attended school (%)' , '14. Women with 10 or more years of schooling (%)','65. Breastfeeding children age 6-23 months receiving an adequate diet9 10 (%)' ,'76. Children age 6-59 months who are anaemic (<11.0 g/dl) (%)', '79. All women age 15-49 years who are anaemic (%)','30. Mothers who had at least 4 antenatal care visits (%)' , '47. Children age 12-23 months fully immunized (BCG measles and 3 doses each of polio/DPT) (%)'])

cols = df_apriori.columns
df_apriori = df_apriori.values
df_apriori = df_apriori.tolist()

"""3.1 Conversion of categorical attributes into a suitable input for association rule mining (assymetric binary attributes)

each attribute will be converted from attribute_name to attribute_name - low , attribute_name - med , attribute_name - high
"""

for row in df_apriori:
  for i in range(len(row)):
    row[i] = cols[i] + ' ' + row[i]

"""3.2 Implementation of Association Rule Mining (Using Apriori Algorithm)"""

# Functions to perform associarion rule mining
def GetRecords(dfApriori):

  for listt in dfApriori:
      recordToYield = frozenset(listt)
      yield recordToYield

dfApriori = df_apriori
records_ = GetRecords(dfApriori)
print(type(records_))
print(records_)

import sys

from itertools import chain, combinations
from collections import defaultdict
from optparse import OptionParser


def subsets(arr):

    return chain(*[combinations(arr, i + 1) for i, a in enumerate(arr)])


def returnItemsWithMinSupport(itemSet, transactionList, minSupport, freqSet):

        _itemSet = set()
        localSet = defaultdict(int)

        for item in itemSet:
                for transaction in transactionList:
                        if item.issubset(transaction):
                                freqSet[item] += 1
                                localSet[item] += 1

        for item, count in localSet.items():
                support = float(count)/len(transactionList)

                if support >= minSupport:
                        _itemSet.add(item)

        return _itemSet


def joinSet(itemSet, length):
        return set([i.union(j) for i in itemSet for j in itemSet if len(i.union(j)) == length])


def getItemSetTransactionList(data_iterator):
    transactionList = list()
    itemSet = set()
    for record in data_iterator:
        transaction = frozenset(record)
        transactionList.append(transaction)
        for item in transaction:
            itemSet.add(frozenset([item]))              # Generate 1-itemSets
    return itemSet, transactionList


def runApriori(data_iter, minSupport, minConfidence):

    itemSet, transactionList = getItemSetTransactionList(data_iter)
    freqSet = defaultdict(int)
    largeSet = dict()
    # Global dictionary which stores (key=n-itemSets,value=support)
    # which satisfy minSupport

    assocRules = dict()
    # Dictionary which stores Association Rules
    #C-1 itemset
    oneCSet = returnItemsWithMinSupport(itemSet,
                                        transactionList,
                                        minSupport,
                                        freqSet)
    #freq-1 itemset
    currentLSet = oneCSet
    k = 2
    while(currentLSet != set([])):
        largeSet[k-1] = currentLSet
        currentLSet = joinSet(currentLSet, k)
        currentCSet = returnItemsWithMinSupport(currentLSet,
                                                transactionList,
                                                minSupport,
                                                freqSet)
        currentLSet = currentCSet
        k = k + 1

    def getSupport(item):
            return float(freqSet[item])/len(transactionList)


#largeSet dict contains the freq Itemsets
    toRetItems = []
    for key, value in largeSet.items():
        toRetItems.extend([(tuple(item), getSupport(item))
                           for item in value])

    toRetRules = []
    for key, value in largeSet.items():
      if not key==0:
        for item in value:
            _subsets = map(frozenset, [x for x in subsets(item)])
            for element in _subsets:
                remain = item.difference(element)
                if len(remain) > 0:
                    confidence = getSupport(item)/getSupport(element)
                    if confidence >= minConfidence:
                        toRetRules.append(((tuple(element), tuple(remain)),
                                           confidence))
    return toRetItems, toRetRules

"""We mined association rules which satisfied a support threshold of 0.15 and confidence threshold of 0.6"""

items_, rules_ = runApriori(records_, 0.15, 0.60)

"""3.3 Frequent Itemsets (Support > 0.15) containing the attribute '% of Children under 5 years who are stunted- high'"""

for complete_tuple in items_:
    itemset = complete_tuple[0]
    if('68. Children under 5 years who are stunted11 (%) high' in itemset):
        print(complete_tuple)
        print("\n\n")

"""3.4 Association Rules (Confidence > 0.6) containing the attribute '% of Children under 5 years who are stunted- high' as its consequent (post condition)"""

for complete_tuple in rules_:
    rule = complete_tuple[0]
    antecedent = rule[0]
    consequent = rule[1]
    if('68. Children under 5 years who are stunted11 (%) high' in consequent and len(consequent)==1):
        print(str(antecedent)+' ---> '+str(consequent))
        conf = complete_tuple[1]
        print('CONFIDENCE is: '+str(conf))
        print("\n\n")